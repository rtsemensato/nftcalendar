{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\nftcalendar\\\\src\\\\contexts\\\\PageHeaderContext.tsx\";\nimport { format, parseISO } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { createContext, useContext, useState } from \"react\";\nimport { apiFakeServer } from \"../services/api\";\nexport const PageHeaderContext = /*#__PURE__*/createContext({});\nexport function PageHeaderContextProvider({\n  children\n}) {\n  const {\n    0: isPageHeaderHidden,\n    1: setIsPageHeaderHidden\n  } = useState(false);\n\n  async function getUserData(id) {\n    const {\n      data: userData\n    } = await apiFakeServer.get(`userGet/${id}`);\n    return userData;\n  }\n\n  async function getNotificationsData() {\n    const {\n      data: notificationsData\n    } = await apiFakeServer.get(\"notificationGet\");\n    const notificationsList = notificationsData.map(notification => {\n      return {\n        id: notification.id,\n        description: notification.description,\n        type: notification.type,\n        dateTimeReceived: format(parseISO(notification.dateTimeReceived), \"dd/MM/yyyy h:m:s\", {\n          locale: ptBR\n        })\n      };\n    });\n    return notificationsList;\n  }\n\n  function hidePageHeader() {\n    setIsPageHeaderHidden(true);\n  }\n\n  function showPageHeader() {\n    setIsPageHeaderHidden(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PageHeaderContext.Provider, {\n    value: {\n      isPageHeaderHidden,\n      hidePageHeader,\n      showPageHeader,\n      getUserData,\n      getNotificationsData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n}\nexport const usePageHeader = () => {\n  return useContext(PageHeaderContext);\n};","map":{"version":3,"sources":["C:/nftcalendar/src/contexts/PageHeaderContext.tsx"],"names":["format","parseISO","ptBR","createContext","useContext","useState","apiFakeServer","PageHeaderContext","PageHeaderContextProvider","children","isPageHeaderHidden","setIsPageHeaderHidden","getUserData","id","data","userData","get","getNotificationsData","notificationsData","notificationsList","map","notification","description","type","dateTimeReceived","locale","hidePageHeader","showPageHeader","usePageHeader"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAaA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAMP,OAAO,SAASK,yBAAT,CAAmC;AAAEC,EAAAA;AAAF,CAAnC,EAAiF;AACvF,QAAM;AAAA,OAACC,kBAAD;AAAA,OAAqBC;AAArB,MAA8CN,QAAQ,CAAC,KAAD,CAA5D;;AAEA,iBAAeO,WAAf,CAA2BC,EAA3B,EAAyD;AACxD,UAAM;AAAEC,MAAAA,IAAI,EAAEC;AAAR,QAAqB,MAAMT,aAAa,CAACU,GAAd,CAAmB,WAAUH,EAAG,EAAhC,CAAjC;AAEA,WAAOE,QAAP;AACA;;AAED,iBAAeE,oBAAf,GAA+D;AAC9D,UAAM;AAAEH,MAAAA,IAAI,EAAEI;AAAR,QAA8B,MAAMZ,aAAa,CAACU,GAAd,CAAkB,iBAAlB,CAA1C;AAEA,UAAMG,iBAAiB,GAAGD,iBAAiB,CAACE,GAAlB,CAAuBC,YAAD,IAAgC;AAC/E,aAAO;AACNR,QAAAA,EAAE,EAAEQ,YAAY,CAACR,EADX;AAENS,QAAAA,WAAW,EAAED,YAAY,CAACC,WAFpB;AAGNC,QAAAA,IAAI,EAAEF,YAAY,CAACE,IAHb;AAINC,QAAAA,gBAAgB,EAAExB,MAAM,CAACC,QAAQ,CAACoB,YAAY,CAACG,gBAAd,CAAT,EAA0C,kBAA1C,EAA8D;AAAEC,UAAAA,MAAM,EAAEvB;AAAV,SAA9D;AAJlB,OAAP;AAMA,KAPyB,CAA1B;AASA,WAAOiB,iBAAP;AACA;;AAED,WAASO,cAAT,GAA0B;AACzBf,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA;;AAED,WAASgB,cAAT,GAA0B;AACzBhB,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;;AAED,sBACC,QAAC,iBAAD,CAAmB,QAAnB;AACC,IAAA,KAAK,EAAE;AACND,MAAAA,kBADM;AAENgB,MAAAA,cAFM;AAGNC,MAAAA,cAHM;AAINf,MAAAA,WAJM;AAKNK,MAAAA;AALM,KADR;AAAA,cAQER;AARF;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;AAED,OAAO,MAAMmB,aAAa,GAAG,MAAM;AAClC,SAAOxB,UAAU,CAACG,iBAAD,CAAjB;AACA,CAFM","sourcesContent":["import { format, parseISO } from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { createContext, ReactNode, useContext, useState } from \"react\";\r\n\r\nimport { apiFakeServer } from \"../services/api\";\r\n\r\nimport { Notification } from \"../types/Notification\";\r\nimport { Usuario } from \"../types/Usuario\";\r\n\r\ntype PageHeaderContextData = {\r\n\tisPageHeaderHidden: boolean;\r\n\thidePageHeader: () => void;\r\n\tshowPageHeader: () => void;\r\n\tgetUserData: (id: number) => Promise<Usuario>;\r\n\tgetNotificationsData: () => Promise<Notification[]>;\r\n};\r\n\r\nexport const PageHeaderContext = createContext({} as PageHeaderContextData);\r\n\r\ntype PageHeaderContextProviderProps = {\r\n\tchildren: ReactNode;\r\n};\r\n\r\nexport function PageHeaderContextProvider({ children }: PageHeaderContextProviderProps) {\r\n\tconst [isPageHeaderHidden, setIsPageHeaderHidden] = useState(false);\r\n\r\n\tasync function getUserData(id: number): Promise<Usuario> {\r\n\t\tconst { data: userData } = await apiFakeServer.get(`userGet/${id}`);\r\n\r\n\t\treturn userData;\r\n\t}\r\n\r\n\tasync function getNotificationsData(): Promise<Notification[]> {\r\n\t\tconst { data: notificationsData } = await apiFakeServer.get(\"notificationGet\");\r\n\r\n\t\tconst notificationsList = notificationsData.map((notification: Notification) => {\r\n\t\t\treturn {\r\n\t\t\t\tid: notification.id,\r\n\t\t\t\tdescription: notification.description,\r\n\t\t\t\ttype: notification.type,\r\n\t\t\t\tdateTimeReceived: format(parseISO(notification.dateTimeReceived), \"dd/MM/yyyy h:m:s\", { locale: ptBR }),\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn notificationsList;\r\n\t}\r\n\r\n\tfunction hidePageHeader() {\r\n\t\tsetIsPageHeaderHidden(true);\r\n\t}\r\n\r\n\tfunction showPageHeader() {\r\n\t\tsetIsPageHeaderHidden(false);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<PageHeaderContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tisPageHeaderHidden,\r\n\t\t\t\thidePageHeader,\r\n\t\t\t\tshowPageHeader,\r\n\t\t\t\tgetUserData,\r\n\t\t\t\tgetNotificationsData,\r\n\t\t\t}}>\r\n\t\t\t{children}\r\n\t\t</PageHeaderContext.Provider>\r\n\t);\r\n}\r\n\r\nexport const usePageHeader = () => {\r\n\treturn useContext(PageHeaderContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}